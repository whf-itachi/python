前端三大块：
1、html：页面结构
2、css：页面表现
3、javascript：页面行为
http常见状态码含义
200（成功） 
（成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页

301（永久移动） 
请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响 
应）时，会自动将请求者转到新位置。

302（临时移动） 
服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。

304 （ 未 修改） 
自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。

401 （ 未 授权） 
请求要求身份验证。

403（禁止） 没有权限，禁止访问

404 （ 未 找到） 
服务器找不到请求的网页。

500（服务器内部错误） 
服务器遇到错误，无法完成请求。

503（服务不可用） 
服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。
--------------------- 

html和css
hyper:亢奋的，即兴奋又紧张的
html：超文本标记语言
第一行是文档声明：<!DOCTYPE html>
第二行“<html>”到“</html>”定义html文档的整体
“<head>”标签和“<body>”标签是它的第一层子元素
	“<head>”标签里面负责对网页进行一些设置以及定义标题，设置包括定义网页的编码格式，外链css样式文件和javascript文件等，设置的内容不会显示在网页上，标题的内容会显示在标题栏
	“<body>”内编写网页上显示的内容
标签分为 块元素标签和内联元素标签 与功能标签
内联标签：img span a
 < 和 > == &lt和 &gt
css:层叠样式表（Cascading Style Sheets ）

css的定义方法是：
选择器 { 属性：值； 属性：值； 属性：值；}
选择器是将样式和页面元素关联起来的名称

css引入页面有三种方式：
1、内联式：通过标签的style属性在标签上直接写样式
2、嵌入式：通过style标签在网页创建嵌入的样式表
3、外链式：通过link标签链接外部样式文件到页面中

css选择器
1、标签选择器 :div{color:red}
2、类选择器 ：.big{font-size:20px}
3、层级选择器（标签嵌套结构）：.con span{color:red}
4、id选择器 ：#box{color:red} 
5、伪类选择器 常用的伪类选择器有hover，表示鼠标悬浮在元素上时的状态 ：
	.box1:{width:100px;height:100px;background:gold;}
	.box1:hover{width:300px;}
hover：盘旋，徘徊，犹豫
css布局常用样式属性：
	border-bottom 设置底边边框
css文本常用样式属性：
	line-height 设置文字的行高
	font-size 设置文字的大小
相对地址与绝对地址
css盒子模型
把元素叫做盒子，设置对应的样式分别为：盒子的宽度(width)、盒子的高度(height)、盒子的边框(border)、盒子内的内容和边框之间的间距(padding)、盒子与盒子之间的间距(margin)。
margin：边缘，利润，页边的空白
pad：填补，衬垫
无序列列表标签
html表单
1、<form>标签 定义整体的表单区域
	action属性 定义表单数据提交地址
	method属性 定义表单提交的方式，一般有“get”方式和“post”方式
4、<textarea>标签 定义多行文本输入框
5、<select>标签 定义下拉表单元素
6、<option>标签 与<select>标签配合，定义下拉表单元素中的选项
placeholder 设置input输入框的默认提示文字

display属性是用来设置元素的类型及隐藏的，常用的属性有：
1、none 元素隐藏且不占位置
2、block 元素以块元素显示

css元素溢出，通过overflow属性来设置
定位：position
relative
absolute
fixed
定位的元素还需要用left、right、top或者bottom来设置相对于参照元素的偏移值
在一个页面中可以开一个局部的窗口，嵌入另外一个页面，可以使用iframe标签来实现这个功能
	<iframe src="001.html" frameborder="0"></iframe>
	其中“src”设置的是另一个网页的地址，“frameborder”设置的是这个局部窗口的边框的粗细。

javascript是运行在浏览器端的脚步语言，主要解决的是前端与用户交互的问题，包括使用交互与数据交互。
javascript嵌入页面的方式
1、行间事件
	<input type="button" name="" onclick="alert('ok！');">
2、页面scritp标签嵌入
	<script type="text/javascript">        
	    alert('ok！');
	</script>
3、外部引入
	<script type="text/javascript" src="js/index.js"></script>

JavaScript 是一种弱类型语言，javascript的变量类型由它的值来决定。 定义变量需要用关键字 'var'
5种基本数据类型：
	1、number 数字类型
	2、string 字符串类型
	3、boolean 布尔类型 true 或 false
	4、undefined undefined类型，变量声明未初始化，它的值就是undefined
	5、null null类型，表示空对象
	1种复合类型：object
变量与函数预解析 
JavaScript解析过程分为两个阶段，先是编译阶段，然后执行阶段，在编译阶段会将function定义的函数提前，并且将var定义的变量声明提前，将它赋值为undefined。
条件语句
条件运算符 
==、===、>、>=、<、<=、!=、&&(而且)、||(或者)、!(否)

获取元素方法
可以使用内置对象document上的getElementById方法来获取页面上设置了id属性的元素，获取到的是一个html对象，然后可将它赋值给一个变量
	var oDiv = document.getElementById('div1');

操作元素属性 
var 变量 = 元素.属性名 读取属性
元素.属性名 = 新属性值 改写属性
属性名在js中的写法 
1、html的属性和js里面属性写法一样
2、“class” 属性写成 “className”
3、“style” 属性里面的属性，有横杠的改成驼峰式，比如：“font-size”，改成”style.fontSize”
操作数组中数据的方法 
join() 将数组成员通过一个分隔符合并成字符串
	var aList = [1,2,3,4];
	alert(aList.join('-')); // 弹出 1-2-3-4

indexOf() 返回数组中元素第一次出现的索引值
	var aList = [1,2,3,4,1,3,4];
	alert(aList.indexOf(1));
字符串处理方法
split() 把一个字符串分隔成字符串组成的数组
substring() 截取字符串 用法： substring(start,end)（不包括end）
字符串反转
	var str = 'asdfj12jlsdkf098';
	var str2 = str.split('').reverse().join('');

	alert(str2);

定时器
setTimeout  只执行一次的定时器 
clearTimeout 关闭只执行一次的定时器
setInterval  反复执行的定时器
clearInterval 关闭反复执行的定时器

1、全局变量：在函数之外定义的变量，为整个页面公用，函数内部外部都可以访问。
2、局部变量：在函数内部定义的变量，只能在定义该变量的函数内部访问，外部无法访问。
jQuery是目前使用最广泛的javascript函数库
jquery提供了ready方法他的速度比原生的window.onload 更快
$(document).ready(function(){
     ......
});
jquery选择器 
	$('#myId') //选择id为myId的网页元素
	$('.myClass') // 选择class为myClass的元素
	$('li') //选择所有的li元素
	$('#ul1 li span') //选择id为为ul1元素下的所有li下的span元素
	$('input[name=first]') // 选择name属性等于first的input元素

对选择集进行过滤
	$('div').has('p'); // 选择包含p元素的div元素
	$('div').not('.myClass'); //选择class不等于myClass的div元素
	$('div').eq(5); //选择第6个div元素

选择集转移
	$('#box').prev(); //选择id是box的元素前面紧挨的同辈元素
	$('#box').prevAll(); //选择id是box的元素之前所有的同辈元素
	$('#box').next(); //选择id是box的元素后面紧挨的同辈元素
	$('#box').nextAll(); //选择id是box的元素后面所有的同辈元素
	$('#box').parent(); //选择id是box的元素的父元素
	$('#box').children(); //选择id是box的元素的所有子元素
	$('#box').siblings(); //选择id是box的元素的同级元素
	$('#box').find('.myClass'); //选择id是box的元素内的class等于myClass的元素

jquery有容错机制，即使没有找到元素，也不会出错，可以用length属性来判断是否找到了元素,length等于0，就是没选择到元素，length大于0，就是选择到了元素。
	alert($div1.length);
jquery样式操作
操作行间样式
	获取div样式
	$("div").css("width");
	设置div的样式
	$("div").css("height","30px");
操作样式类名
	$("#div1").addClass("divClass2") //为id为div1的对象追加样式divClass2
	$("#div1").removeClass("divClass")  //移除id为div1的对象的class名为divClass的样式
	$("#div1").removeClass("divClass divClass2") //移除多个样式
	$("#div1").toggleClass("anotherClass") //重复切换anotherClass样式

绑定click事件
	$('#btn1').click(function(){
		// 内部的this指的是原生对象
		// 使用jquery对象用 $(this)

	})
jquery动画
通过animate方法可以设置元素某属性值上的动画
	/*
		animate参数：
		参数一：要改变的样式属性值，写成字典的形式
		参数二：动画持续的时间，单位为毫秒，一般不写单位
		参数三：动画曲线，默认为‘swing’，缓冲运动，还可以设置为‘linear’，匀速运动
		参数四：动画回调函数，动画完成后执行的匿名函数
	*/
eg：
	$('#div1').animate({
		width:300,
		height:300
	},1000,'swing',function(){
		alert('done!');
	});
与上方例子同样使用方法
fadeOut() 淡出
fadeToggle() 切换淡入淡出
hide() 隐藏元素
show() 显示元素
toggle() 切换元素的可见状态
slideDown() 向下展开
slideUp() 向上卷起
slideToggle() 依次展开或卷起某个元素

对jquery选择的对象集合分别进行操作，需要用到jquery循环操作，此时可以用对象上的each方法：
	$(function(){
		$('.list li').each(function(){
		    $(this).html( $(this).index() );
		})
	})

jquery事件：
blur() 元素失去焦点
focus() 元素获得焦点
click() 鼠标单击
mouseover() 鼠标进入（进入子元素也触发）
mouseout() 鼠标离开（离开子元素也触发）
mouseenter() 鼠标进入（进入子元素不触发）
mouseleave() 鼠标离开（离开子元素不触发）
hover() 同时为mouseenter和mouseleave事件指定处理函数
ready() DOM加载完成
submit() 用户递交表单
正则规则
\w 匹配一个单词字符（字母、数字、下划线）
\W 匹配任何非单词字符。等价于[^A-Za-z0-9_]
? 出现零次或一次（最多出现一次）
+ 出现一次或多次（至少出现一次）
* 出现零次或多次（任意次）
{n} 出现n次
{n,m} 出现n到m次
{n,} 至少出现n次
修饰参数：
g： global，全文搜索，默认搜索到第一个结果接停止
i： ingore case，忽略大小写，默认大小写敏感
事件冒泡：
合并阻止操作  return false;

事件委托就是利用冒泡的原理，把事件加到父级上，通过判断事件来源的子集，执行相应的操作，事件委托首先可以极大减少事件绑定次数，提高性能；其次可以让新加入的子元素也可以拥有相同的操作。
事件委托的写法

	$(function(){
		$list = $('#list');
		$list.delegate('li', 'click', function() {
		    $(this).css({background:'red'});
		});
	})

delegate：委派...为代表

ajax技术的目的是让javascript发送http请求，与后台通信，获取数据和信息。ajax技术的原理是实例化xmlhttp对象，使用此对象与后台通信。ajax通信的过程不会影响后续javascript的执行，从而实现异步。
写法：
	$.ajax({
		url: '/change_data',
		type: 'GET',
		dataType: 'json',
		data:{'code':300268}
	})
	.done(function(dat) {
		alert(dat.name);
	})
	.fail(function() {
		alert('服务器超时，请重试！');
	});
$.ajax按照请求方式可以简写成$.get或者$.post方式
只传入 请求地址 和 设置发送给服务器的数据
	$.get("/change_data", {'code':300268},
	  function(dat){
		alert(dat.name);
	});

	$.post("/change_data", {'code':300268},
	  function(dat){
		alert(dat.name);
	});

jsonp：
	ajax只能请求同一个域下的数据或资源，有时候需要跨域请求数据，就需要用到jsonp技术，jsonp可以跨域请求数据，它的原理主要是利用了<script>标签可以跨域链接资源的特性。jsonp和ajax原理完全不一样，不过jquery将它们封装成同一个函数。


Vue.js是前端三大新框架之一，Vue.js可以作为一个js库来使用，也可以用它全套的工具来构建系统界面，Vue.js是一套构建用户界面的渐进式框架。
需要在页面上通过script标签引入vue.js，开发中可以使用开发版本vue.js，产品上线要换成vue.min.js。
	<script type="text/javascript" src="js/vue.min.js"></script>

每个 Vue 应用都是通过实例化一个新的 Vue对象开始的：

	window.onload = function(){
		var vm = new Vue({
		    el:'#app',
		    data:{message:'hello world!'}
		});
	}    
	......

	<div id="app">{{ message }}</div>
其中，el属性对应一个标签，当vue对象创建后，这个标签内的区域就被vue对象接管，在这个区域内就可以使用vue对象中定义的属性和方法。

指令 (Directives) 是带有“v-”前缀的特殊属性，指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM
	<button v-on:click="fnChangeMsg">按钮</button>

条件渲染
v-if
v-else-if
v-else

v-show是用于根据条件展示元素，即便隐藏元素依然存在
遍历对象
可以使用v-for 通过一个对象的属性来迭代
	<ul id="v-for-object">
	  <li v-for="value in object">
		{{ value }}
	  </li>
	</ul>

过滤器
	{{ prize | RMB }}

	filters:{
	  RMB:function(value){
		if(value=='')
		{
		  return;
		}
		return '¥ '+value;
	  }
	}

数据交互：vue没有集成ajax功能，要使用ajax功能，可以使用vue官方推荐的axios.js库来做ajax的交互

ES6语法

箭头函数
可以把箭头函数理解成匿名函数的第二种写法，箭头函数的作用是可以在对象中绑定this，解决了JavaScript中this指定混乱的问题。
	// 通过箭头函数的写法定义
	var fnRs = (a,b)=>{
		var rs = a + b;
		alert(rs);
	}        
	// fnRs(1,2);












































